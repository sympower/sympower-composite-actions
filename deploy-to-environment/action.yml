name: 'Deploy to environment'
description: 'Upgrade the environment with the latest docker image'
inputs:
  secrets:
    description: 'Secrets required for the build'
    required: true
  version:
    description: 'Version number of the image released to ECR'
    required: true
  default-name:
    description: 'Default service and component name to use when not specified in the auto-deployment file'
    required: true
  deploy-group:
    description: 'Will include auto-deploys with matching "deployGroup". If "deployGroup" is not defined for auto-deploy configuration then environment name is matched instead.'
    required: true
runs:
  using: "composite"
  steps:
    - uses: tibdex/github-app-token@v2
      id: generate-token
      with:
        app_id: ${{ fromJSON(inputs.secrets).AUTODEPLOYER_ID }}
        private_key: ${{ fromJSON(inputs.secrets).AUTODEPLOYER_KEY }}

    - name: Trigger deployments
      shell: bash
      env:
        DEPLOYER_TOKEN: ${{ steps.generate-token.outputs.token }}
      run: |
        set -ue
        
        DEFAULT_NAME='${{ inputs.default-name }}'
        VERSION='${{ inputs.version }}'
        INCLUDE_GROUP='${{ inputs.deploy-group }}'
        
        for env in $( ls auto-deploy/*.env.json ) ; do
        
          ENVIRONMENT=$( jq -r '.environment' "$env" )
          COMPONENT=$( jq -r '.component' "$env" )
          SERVICE=$( jq -r '.service' "$env" )
          DEPLOY_GROUP=$( jq -r '.deployGroup' "$env" )
        
          if [ -z "$ENVIRONMENT" ] || [ "$ENVIRONMENT" = "null" ] ; then
            echo "ERROR: Missing environment in $env"
            exit 1
          fi
      
          if [ -z "$COMPONENT" ] || [ "$COMPONENT" = "null" ] ; then
            COMPONENT="$DEFAULT_NAME"
          fi
      
          if [ -z "$SERVICE" ]|| [ "$SERVICE" = "null" ] ; then
            SERVICE="$DEFAULT_NAME"
          fi
        
          if [ -z "$DEPLOY_GROUP" ] || [ "$DEPLOY_GROUP" = "null" ] ; then
            DEPLOY_GROUP="$ENVIRONMENT"
          fi
        
          if [ "$DEPLOY_GROUP" = "$INCLUDE_GROUP" ] ; then
          
            DISPATCH_EVENT="${{ github.repository }} calls update version to $VERSION for $COMPONENT/$SERVICE in $ENVIRONMENT"
          
            BODY='{
              "event_type": "update_version_event",
              "client_payload": {
                "dispatch_event": "'"$DISPATCH_EVENT"'",
                "environment": "'"$ENVIRONMENT"'",
                "component": "'"$COMPONENT"'",
                "service": "'"$SERVICE"'",
                "version": "'"$VERSION"'"
              }
            }'
          
            echo "$DISPATCH_EVENT"
          
            curl -H "Accept: application/vnd.github.everest-preview+json" \
              -H "Authorization: token ${DEPLOYER_TOKEN}" \
              --request POST \
              --data "${BODY}" \
              https://api.github.com/repos/sympower/environments/dispatches
          
            echo "Done: $DISPATCH_EVENT"
        
          fi
        
        done