name: 'Deploy to environment'
description: 'Upgrade the environment with the latest docker image'
inputs:
  secrets:
    description: 'Secrets required for the build'
    required: true
  version:
    description: 'Version number of the image released to ECR'
    required: true
  fallback-name:
    description: 'Fallback service and component name to use when not specified in the auto-deployment file. If not declared then repository name is used instead.'
    required: false
  deploy-group:
    description: 'Will include auto-deploys with matching "deployGroup". If "deployGroup" is not defined for auto-deploy configuration then environment name is matched instead.'
    required: true
  require-approval:
    description: 'If set to true then the deployment will require approval before it can be deployed'
    required: true 
runs:
  using: "composite"
  steps:
    # Ensure that the repository is checked out for jobs that don't have setup-build-environment step before
    - uses: actions/checkout@v4
    - uses: tibdex/github-app-token@v2
      id: generate-token
      with:
        app_id: ${{ fromJSON(inputs.secrets).AUTODEPLOYER_ID }}
        private_key: ${{ fromJSON(inputs.secrets).AUTODEPLOYER_KEY }}

    - name: Trigger deployments
      shell: bash
      env:
        DEPLOYER_TOKEN: ${{ steps.generate-token.outputs.token }}
      run: |
        set -ue
        
        REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
        
        FALLBACK_NAME='${{ inputs.fallback-name }}'
        VERSION='${{ inputs.version }}'
        INCLUDE_GROUP='${{ inputs.deploy-group }}'
        REQUIRE_APPROVAL='${{ inputs.require-approval }}'
        
        if [ -z "$FALLBACK_NAME" ] ; then
          FALLBACK_NAME="$REPOSITORY_NAME"
        fi
        
        for env in $( ls auto-deploy/*.env.json ) ; do
        
          ENVIRONMENT=$( jq -r '.environment' "$env" )
          COMPONENT=$( jq -r '.component' "$env" )
          SERVICE=$( jq -r '.service' "$env" )
          DEPLOY_GROUP=$( jq -r '.deployGroup' "$env" )
        
          if [ -z "$ENVIRONMENT" ] || [ "$ENVIRONMENT" = "null" ] ; then
            echo "ERROR: Missing environment in $env"
            exit 1
          fi
      
          if [ -z "$COMPONENT" ] || [ "$COMPONENT" = "null" ] ; then
            COMPONENT="$FALLBACK_NAME"
          fi
      
          if [ -z "$SERVICE" ]|| [ "$SERVICE" = "null" ] ; then
            SERVICE="$FALLBACK_NAME"
          fi
        
          if [ -z "$DEPLOY_GROUP" ] || [ "$DEPLOY_GROUP" = "null" ] ; then
            DEPLOY_GROUP="$ENVIRONMENT"
          fi
        
          if [ "$DEPLOY_GROUP" = "$INCLUDE_GROUP" ] ; then
          
            DISPATCH_EVENT="${{ github.repository }} calls update version to $VERSION for $COMPONENT/$SERVICE in $ENVIRONMENT"
          
            BODY='{
              "event_type": "update_version_event",
              "client_payload": {
                "dispatch_event": "'"$DISPATCH_EVENT"'",
                "environment": "'"$ENVIRONMENT"'",
                "component": "'"$COMPONENT"'",
                "service": "'"$SERVICE"'",
                "version": "'"$VERSION"'",
                "require_approval": "'"$REQUIRE_APPROVAL"'"
              }
            }'
          
            echo "$DISPATCH_EVENT"
          
            curl -H "Accept: application/vnd.github.everest-preview+json" \
              -H "Authorization: token ${DEPLOYER_TOKEN}" \
              --request POST \
              --data "${BODY}" \
              https://api.github.com/repos/sympower/environments/dispatches
          
            echo "Done: $DISPATCH_EVENT"
        
          fi
        
        done
